<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="_finite_state_machine_8cpp" kind="file" language="C++">
    <compoundname>FiniteStateMachine.cpp</compoundname>
    <includes refid="_finite_state_machine_8h" local="yes">fsm/FiniteStateMachine.h</includes>
    <incdepgraph>
      <node id="2">
        <label>fsm/FiniteStateMachine.h</label>
        <link refid="_finite_state_machine_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Users/mosta/Desktop/Projects/Programming/SDKs/FSM/src/FiniteStateMachine.cpp</label>
        <link refid="_finite_state_machine_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>array</label>
      </node>
      <node id="11">
        <label>concepts</label>
      </node>
      <node id="10">
        <label>functional</label>
      </node>
      <node id="8">
        <label>iostream</label>
      </node>
      <node id="3">
        <label>set</label>
      </node>
      <node id="9">
        <label>source_location</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="4">
        <label>unordered_set</label>
      </node>
      <node id="12">
        <label>utility/Logger.h</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_finite_state_machine_8h" kindref="compound">fsm/FiniteStateMachine.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="namespacem0st4fa_1_1fsm_1a049a43a65e520ebdd78baf2c61afd2f8" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespacem0st4fa_1_1fsm_1aefb70e7de357a6d1fbb8f603f12f30c3" kindref="member">m0st4fa::fsm::operator&lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structm0st4fa_1_1fsm_1_1_f_s_m_result" kindref="compound">FSMResult</ref>&amp;<sp/>result)</highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger" kindref="compound">Logger</ref><sp/>logger;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>temp<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>+=<sp/>std::to_string(*result.<ref refid="structm0st4fa_1_1fsm_1_1_f_s_m_result_1a9db79a6b95ea47d708e9354c03249762" kindref="member">finalState</ref>.<ref refid="structm0st4fa_1_1fsm_1_1_f_s_m_state_set_type_1aabf7cc7baa5c6e1a289fa4e635466cac" kindref="member">begin</ref>());</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>:<sp/>result.<ref refid="structm0st4fa_1_1fsm_1_1_f_s_m_result_1a9db79a6b95ea47d708e9354c03249762" kindref="member">finalState</ref>)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>*result.<ref refid="structm0st4fa_1_1fsm_1_1_f_s_m_result_1a9db79a6b95ea47d708e9354c03249762" kindref="member">finalState</ref>.<ref refid="structm0st4fa_1_1fsm_1_1_f_s_m_state_set_type_1aabf7cc7baa5c6e1a289fa4e635466cac" kindref="member">begin</ref>())</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>+=<sp/>(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(s));</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacem0st4fa_1_1fsm_1af46ab8df7db57ffc5e7a7492a473a981" kindref="member">IndexType</ref><sp/>startIndex<sp/>=<sp/>result.<ref refid="structm0st4fa_1_1fsm_1_1_f_s_m_result_1a85f305cf097f34b6714ea8fe081623db" kindref="member">indicies</ref>.<ref refid="structm0st4fa_1_1fsm_1_1_indicies_1a244dd51885862adac586860d18f2a9fa" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacem0st4fa_1_1fsm_1af46ab8df7db57ffc5e7a7492a473a981" kindref="member">IndexType</ref><sp/>endIndex<sp/>=<sp/>result.<ref refid="structm0st4fa_1_1fsm_1_1_f_s_m_result_1a85f305cf097f34b6714ea8fe081623db" kindref="member">indicies</ref>.<ref refid="structm0st4fa_1_1fsm_1_1_indicies_1a66006d44d1326899a7e14bfe36498ffd" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log(LoggerInfo::INFO,<sp/>std::format(</highlight><highlight class="stringliteral">&quot;Accepted<sp/>string:<sp/>{}\nIndecies<sp/>of<sp/>the<sp/>match:<sp/>{{{},<sp/>{}}}\nFinal<sp/>states<sp/>reached:<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="structm0st4fa_1_1fsm_1_1_f_s_m_result_1a2d5ad097cea8fc385dc07e1276942075" kindref="member">accepted</ref>,<sp/>startIndex,<sp/>endIndex,<sp/>temp.data()));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string_view<sp/>temp2{result.<ref refid="structm0st4fa_1_1fsm_1_1_f_s_m_result_1aa10fe4132da299e6ebe6eada766b9619" kindref="member">input</ref>.data()<sp/>+<sp/>startIndex,<sp/>endIndex};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.logDebug(std::format(</highlight><highlight class="stringliteral">&quot;Matched<sp/>string:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>temp2));</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::cout;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/mosta/Desktop/Projects/Programming/SDKs/FSM/src/FiniteStateMachine.cpp"/>
  </compounddef>
</doxygen>
